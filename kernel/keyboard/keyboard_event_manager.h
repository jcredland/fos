#pragma once

/** @file
 * This set of classes and data can take a stream from the KeyboardHardware driver
 * and translate it into a stream of events which include characters as well as 
 * special keys and modifier keys that an application can use relatively easily.
 *
 * It allows for changing the language on a keyboard. 
 */

/** Keymapping describes the characters and functions of keys on the keyboard. */
struct KeyAttributes
{
    KeyboardKeyCode key_code; 
    char32_t key_with_shift; 
    char32_t key_without_shift;
};

typedef KeyAttributes KeyMappingArray;

/** Import the KeyboardKeyCode mappings to KeyAttributes information. */
#include "utils/uk.h"


struct Modifiers
{
    bool shift; 
    bool control; 
    bool alt; 

    bool operator==(const Modifiers & rhs) const
    {
        return (shift == rhs.shift) &&
            (control == rhs.control) &&
            (alt == rhs.alt); 
    }
};
/** 
 * Describes an event generated by the keyboard driver when a key is pressed. 
 */
struct KeyEvent
{
    KeyEvent(KeyboardKeyCode key_code, Modifiers modifiers, char32_t character_representation)
        :
            key_code(key_code),
            modifiers(modifiers),
            character(character_representation)
    {}

    KeyboardKeyCode key_code;
    Modifiers modifiers;
    char32_t character; 

    bool is_alpha() const
    {
        return (character >= 'A' && character <= 'Z');
    }

    bool is_control_character() const
    {
        return (character < ' ');
    }

    bool operator==(const KeyEvent & rhs) const
    {
        return (key_code == rhs.key_code) &&
            (modifiers == rhs.modifiers) &&
            (character == rhs.character); 
    }

    const static KeyEvent invalid; 
};

/**
 * Provides the link between the KeyboardHardware and the queue of KeyEvents
 *
 */
class KeyEventManager
{
    public:
        KeyEventManager()
        {
            keyboard = device_manager.get_device_by_name("keyboard"); 

            if (keyboard == nullptr)
                kerror("KeyEventManager: no keyboard driver found."); 
        }

        KeyEvent next()
        {
            if (! keyboard)
                return KeyEvent::invalid; 

            int c = keyboard->read_char();  

            if (c == -1)
                return KeyEvent::invalid; 

            KeyEvent e {(KeyboardKeyCode) c, 
                Modifiers(), 
                keymap_uk[c].key_without_shift};

            return e; 
        }

    private:
        Device * keyboard; 
};
